import argparse
import os
import subprocess

print("Generating asset binary files. ")

parser = argparse.ArgumentParser()
parser.add_argument("output_dir", type=str)
parser.add_argument("source_dir", type=str)

args = parser.parse_args()

def list_to_string(l):
    return "{" + ",".join([str(x) for x in l]) + "}"

with open(f"{args.output_dir}/__assets_binary_autogenerated.h", "w") as f:
    f.write(
        "// Code generated by embed_shaders.py. DO NOT EDIT.\n"
        "\n"
        "#pragma once\n"
        "\n"
        "#include <vector>\n"
        "#include <cstdint>\n"
        "#include <unordered_map>\n"
        "#include <iostream>\n"
        "\n"
        "const std::vector<uint8_t> &lookup_asset_binary(const std::string &filename);\n"
    )

assets = {}
for filename in os.listdir(f"{args.source_dir}/assets"):
    with open(f"{args.source_dir}/assets/{filename}", "rb") as f:
        b = []
        while True:
            byte = f.read(1)
            if not byte:
                break
            b.append(int.from_bytes(byte))

        assets[filename] = b

entries = ",\n".join(["{\"" + k + "\", " + list_to_string(v) + "}" for k, v in assets.items()])

with open(f"{args.output_dir}/__assets_binary_autogenerated.cpp", "w") as f:
    f.write(
    "// Code generated by embed_shaders.py. DO NOT EDIT.\n"
    "#include \"__assets_binary_autogenerated.h\"\n"
    "\n"
    "const std::vector<uint8_t> &lookup_asset_binary(const std::string &filename) {\n"
    "  static std::unordered_map<std::string, std::vector<uint8_t>> sources = {\n"
    f"    {entries}\n"
    "  };\n"
    "  return sources[filename];\n"
    "}\n"
    )
