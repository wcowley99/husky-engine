import argparse
import os
import subprocess

print("Generating shaders source files.")

parser = argparse.ArgumentParser()
parser.add_argument("output_dir", type=str)
parser.add_argument("source_dir", type=str)

args = parser.parse_args()

with open(f"{args.output_dir}/__shader_sources_autogenerated.h", "w") as f:
    f.write(
        "// Code generated by embed_shaders.py. DO NOT EDIT.\n"
        "\n"
        "#pragma once\n"
        "\n"
        "#include <vector>\n"
        "#include <cstdint>\n"
        "#include <unordered_map>\n"
        "#include <iostream>\n"
        "\n"
        "const std::vector<uint32_t> &lookup_shader_source(const std::string &filename);\n"
    )

with open(f"{args.output_dir}/__shader_sources_autogenerated.cpp", "w") as f:
    spirv = {}
    for filename in os.listdir(f"{args.source_dir}/shaders"):
        try:
            fqn = f"{args.source_dir}/shaders/{filename}"
            command = ["glslc", fqn, "-mfmt=c", "-o", "-"]
            process = subprocess.run(command, capture_output=True, text=True)
            spirv[filename] = process.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Error compiling shader {filename}: {e}")
            exit(-1)

    entries = ",\n".join(["{\"" + k + "\", " + v + "}" for k, v in spirv.items()])

    f.write(
        "// Code generated by embed_shaders.py. DO NOT EDIT.\n"
        "#include \"__shader_sources_autogenerated.h\"\n"
        "\n"
        "const std::vector<uint32_t> &lookup_shader_source(const std::string &filename) {\n"
        "  static std::unordered_map<std::string, std::vector<uint32_t>> sources = {\n"
        f"    {entries}\n"
        "  };\n"
        "  return sources[filename];\n"
        "}\n"
    )

